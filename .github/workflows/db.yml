# This is a basic workflow to help you get started with Actions
name: CI_DB

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      environment:
        description: 'Environment'
        required: true
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "db" ]
  pull_request:
    branches: [ "db" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    runs-on: ubuntu-latest
    environment: 'db'
    steps:
      - name: Create .env file
        run: |
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
          echo "ENV=${{ vars.DEPLOY_HOST }} ${{ vars.DEPLOY_USERNAME }}"
          echo "Generating .env file"
          echo "# Autogenerated .env file" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          ls -la
      - name: Copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.DEPLOY_HOST }}
          username: ${{ vars.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ vars.DEPLOY_PORT }}
          source: "./docker-compose.yml"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      # - name: Deploy
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ vars.DEPLOY_HOST }}
      #     username: ${{ vars.DEPLOY_USERNAME }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     port: ${{ vars.DEPLOY_PORT }}
      #     script: |
      #       cd ~/.deploy/${{ github.event.repository.name }}
      #       docker compose -f docker-compose.db.yml up -d
