# This is a basic workflow to help you get started with Actions
name: CI_DB
permissions:
  contents: write
  packages: write

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "db" ]
  pull_request:
    branches: [ "db" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Build docker compose
        run: docker compose -f docker-compose.db.yml build --no-cache --force-rm
  test:
    needs: build
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test
        run: docker compose -f docker-compose.db.yml up
  push_to_registry:
    needs: [build, test]
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
      - name: checkout tag
        uses: actions/checkout@v3
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
        with:
          ref: ${{ github.event.inputs.version }}
  deploy_via_ssh:
    needs: push_to_registry
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Create .env file
        run: |
          echo "Generating .env file"

          echo "# Autogenerated .env file" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
      - name: Copy files to target server via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          source: .env
          target: .env
